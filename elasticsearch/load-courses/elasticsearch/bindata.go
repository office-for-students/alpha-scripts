// Code generated by go-bindata.
// sources:
// ../mappings.json
// DO NOT EDIT!

package elasticsearch

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _MappingsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xcb\x8e\xdb\x3a\x0c\x5d\x3b\x5f\x11\x68\x7b\xb3\x19\x5c\xdc\xcd\x7c\xc3\xdc\x2f\xe8\x14\x02\x23\x33\xb6\x1a\x99\x72\x25\xb9\x9e\x74\x90\x7f\x2f\xe4\xa7\x6c\xcb\x41\x32\xaf\x4e\x9b\x85\x61\x53\xd4\xe1\xe1\x21\xf5\xc8\xf3\x26\x61\x16\x9d\x93\x94\x59\x76\xbf\x7d\xde\x24\x09\x93\x94\xe2\x53\xf7\x91\x30\xaa\x8a\x3d\x1a\xae\x0f\xdc\x60\xa9\xa4\x00\xef\x77\xb7\x9b\x8d\xd9\x1c\x4c\xea\x47\xfe\x6b\x47\x80\x40\x9d\xac\xec\x31\x93\x84\x1d\xa4\x72\x68\x86\xef\x84\x41\xe5\xb4\xd0\x45\xa9\xd0\x21\x9f\x8f\x26\xac\x80\x27\x9e\x19\x28\xd8\xfd\xf6\xdf\x16\xb4\xb1\x4a\xea\xad\x77\x83\xd1\x9d\x4a\x64\xf7\x5b\x86\x69\x86\x9c\x9a\xe1\x76\xe8\xdc\xb9\x30\xa1\x95\x82\xd2\x22\xaf\x73\xe9\xd0\x96\x20\x62\x21\x4b\x70\x0e\x0d\x79\xa8\xc7\x47\xfb\x0f\x1b\x02\xf8\xcc\x41\x60\x81\xe4\xfc\xe0\x96\x2d\x42\x77\x53\x79\xe7\xb9\x8c\x5f\x19\x8b\x9c\xa0\x40\x6e\x4f\xa4\xe9\x54\x84\x81\x7b\x94\x7e\x68\x80\xef\x0c\x5e\xc6\x2f\x9d\x2d\x61\xff\x83\xcb\xed\xae\x68\x9e\xfe\x1d\x0b\x70\x52\xb4\x96\xee\x7d\x40\x48\xd8\x03\xd4\xbb\x07\xcc\x40\xed\x14\xd4\x3b\xe5\xdf\x3a\x76\xc9\xd7\x8e\xe5\x26\xe0\xda\x56\xee\xe7\xa4\x52\x06\x6a\xbe\x34\x07\x25\x1d\xb9\x29\x5d\xa3\x11\x60\x31\x60\x70\x41\xfc\xd1\xc9\x19\x59\x4c\xe6\x2c\x05\xeb\x59\x8f\xe2\xeb\x23\x92\x6c\x49\xb1\x11\x7c\x59\x1d\x51\x59\xa7\x87\xa6\xd8\x0c\x4f\xff\x38\x6f\x9a\xd4\x59\x01\x65\x19\xae\x82\x96\xc1\xb0\x0c\x4a\xa3\x4b\x34\x4e\x62\xd0\xd2\x47\x69\x79\x47\x54\xa6\x81\x5e\x07\x89\x2a\xb5\xa1\x52\x06\xea\xe0\x73\x22\xf2\x54\xdd\x40\x90\x8e\xbb\xc3\x27\x17\x98\x9b\xc5\xc9\x75\xe9\xa4\x26\x1f\x82\xa5\x7a\x52\x6e\xd2\xa6\x69\x97\x03\x28\x8b\x9d\xf5\x3c\xeb\xc6\x1e\xfa\x88\xa7\x5a\x9b\x94\x4d\xea\x8f\x94\x29\x69\x73\xee\xa4\x53\xf8\x27\x27\xb5\x9d\xfd\xce\xbb\x85\x89\xd5\xa8\xfe\x86\x54\xc3\xfa\x09\x5d\x91\x33\xa7\x86\xee\x3c\xdf\x26\xe7\x7e\x7b\x6f\x22\x2c\x35\x69\x7c\xae\x89\xc0\x85\x4e\xf1\x7d\xc2\x2c\x1c\x53\x69\x1d\x90\x40\xae\x10\x0c\x49\xca\xde\x38\xee\xdc\x23\xc6\xe1\xa0\x2b\x4a\xc1\xd7\x8d\x9f\x10\xcc\x3b\x0a\x9c\x6b\xf2\xbb\x0a\x87\x1a\x4c\xb8\xaf\xcc\x80\xaf\x68\x06\x49\xd6\x49\x57\x35\xa4\xfd\x5e\x1a\x80\xcd\xe7\xed\x62\x41\xd6\xc0\xd6\x93\x9f\xed\x93\x31\x9f\xd6\xaf\xda\x2b\x29\x78\x75\x2c\x0d\x8d\xac\x6e\xd1\xf0\xfa\x6a\xf6\xbf\x48\x55\xa3\x7c\x66\x52\xfd\x3e\x52\x9f\x46\x9d\x98\x2c\xeb\x3d\x14\xed\xa2\x71\xff\x4a\x98\x8a\x0b\x7d\x3b\x62\x94\xf1\xf4\x3e\xa3\x90\x32\x97\xfb\x3b\xea\xf4\x44\xbf\x75\x3d\x2d\x34\x51\x92\x8e\x57\x6f\x02\xaf\x38\xa3\x94\x16\x70\xd3\x9a\xeb\x04\xeb\x0f\xf2\x85\xc6\x31\x6a\x03\x56\x34\xfd\xa8\x00\x23\x41\xf0\xdb\xc2\x85\xb3\xe0\xa2\x28\xeb\x91\xd7\x60\x2e\x72\xd1\x94\x7d\x34\x99\x4e\xd6\xf6\x2e\xf1\x36\x6a\xaf\xf4\xf5\x15\x4a\xb0\xe2\xed\x4f\xe5\x95\x9c\x19\xe5\x96\x1f\x2a\x4a\xf1\xc5\x87\xd4\x22\xf6\xf7\x0a\x94\x3c\xc8\x1b\x3b\x3e\xe6\xd3\xf8\x5d\xbc\xa2\xac\x89\xf2\x1e\x6d\x09\x7b\x54\x9f\x82\x08\xfe\xf8\x1c\x44\x86\x75\xf2\x11\x3c\xae\x5f\x4e\x4d\xb7\x5a\xa0\xb4\x96\x22\x1f\xef\x79\x2f\xbd\x7f\xd9\x6a\xff\x0d\x85\x1b\xaf\xca\xaf\x05\x9a\x5d\xe2\x6e\x07\xf2\x29\x71\xd8\x1b\x0d\x2f\x5c\xb4\xe1\xff\xe6\xcd\x79\xf3\x2b\x00\x00\xff\xff\x75\x6a\xfb\xca\x41\x12\x00\x00")

func MappingsJsonBytes() ([]byte, error) {
	return bindataRead(
		_MappingsJson,
		"../mappings.json",
	)
}

func MappingsJson() (*asset, error) {
	bytes, err := MappingsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../mappings.json", size: 4673, mode: os.FileMode(420), modTime: time.Unix(1561104337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../mappings.json": MappingsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"mappings.json": &bintree{MappingsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

