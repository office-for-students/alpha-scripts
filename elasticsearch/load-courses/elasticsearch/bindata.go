// Code generated by go-bindata.
// sources:
// ../mappings.json
// DO NOT EDIT!

package elasticsearch

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _MappingsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xcd\x6e\xdb\x30\x0c\x3e\x3b\x4f\x11\xe8\xba\x5c\x8a\x61\x97\x3e\x43\xf7\x04\xeb\x20\x30\x32\x6d\x6b\x91\x29\x4f\x92\xe7\x7a\x45\xde\x7d\x90\x7f\xe5\x9f\x04\x49\x9b\x76\xdd\x72\x30\x6c\x92\x26\x3f\x7e\xfc\xb1\xf2\xbc\x89\x98\x45\xe7\x24\xa5\x96\xdd\x6f\x9f\x37\x51\xc4\x24\xc5\xf8\xd4\x3d\x44\x8c\xca\x7c\x8f\x86\xeb\x84\x1b\x2c\x94\x14\xe0\xed\xee\x76\x33\x9d\xcd\xc0\xc4\x5e\xf3\xa5\xd5\x00\x81\xaa\xad\xec\x7d\x46\x11\x4b\xa4\x72\x68\x86\xe7\x88\x41\xe9\xb4\xd0\x79\xa1\xd0\x21\x9f\x6b\x23\x96\xc3\x13\x4f\x0d\xe4\xec\x7e\xfb\xb9\x75\xda\x48\x25\xf5\xd2\xbb\x41\xe8\xea\x02\xd9\xfd\x96\x61\x9c\x22\xa7\x46\xdd\xaa\x8e\x9d\x09\x13\x5a\x29\x28\x2c\xf2\x2a\x93\x0e\x6d\x01\x62\x2d\x64\x01\xce\xa1\x21\xef\xea\xf1\xd1\x7e\x62\x43\x00\x9f\x39\x08\xcc\x91\x9c\x57\x6e\xd9\x22\x74\xf7\x2a\xef\x2c\x97\xf1\x4b\x63\x91\x13\xe4\xc8\x6d\x4d\x9a\xea\x3c\x0c\xdc\x7b\xe9\x55\x83\xfb\x4e\xe0\x69\xfc\xd6\xc9\x22\xf6\x15\x5c\x66\x77\x79\x73\xf5\xf7\x98\x83\x93\xa2\x95\x74\xf7\x83\x87\x88\x3d\x40\xb5\x7b\xc0\x14\xd4\x4e\x41\xb5\x53\xfe\xae\x43\x17\x7d\xef\x50\x6e\x02\xac\x6d\xe5\x7e\x4f\x2a\x65\xa0\xe2\x4b\x71\x50\xd2\x11\x9b\xd2\x15\x1a\x01\x16\x03\x04\x67\xc8\x1f\x8d\x9c\x91\xf9\xe4\x9d\x25\x61\x3d\xea\x91\x7c\x7d\x40\x92\x2d\x28\x36\x3a\x5f\x56\x47\x94\xd6\xe9\xa1\x29\x36\xc3\xd5\x5f\x8e\x9b\x26\x75\x96\x43\x51\x84\x53\xd0\x22\x18\xc6\xa0\x30\xba\x40\xe3\x24\x06\x2d\x7d\x90\x96\x77\x40\x65\x1c\xf0\x95\x48\x54\xb1\x0d\x99\x32\x50\x05\x8f\x13\x92\xa7\xec\x06\x84\x74\xd8\x1d\x3e\xb9\x40\xdc\x0c\x27\xd7\x85\x93\x9a\x7c\x08\x16\xeb\x49\xb9\x49\x9b\xa6\x5d\x12\x50\x16\x3b\xe9\x71\xd6\x8d\xbd\xeb\x03\xd6\x95\x36\x31\x9b\xd4\x1f\x29\x55\xd2\x66\xdc\x49\xa7\xf0\x5f\x4e\x6a\x3b\xfb\x1d\x77\x0b\x11\xab\x50\xfd\x0f\xa9\x86\xf5\x13\xba\x24\x67\xea\x06\xee\x3c\xdf\x26\xe7\x7e\xbd\x37\x11\x96\x9c\x34\x36\x97\x44\xe0\x42\xc7\xf8\x36\x61\x16\x86\xb1\xb4\x0e\x48\x20\x57\x08\x86\x24\xa5\x37\x8e\x3b\xb7\x58\xc3\x90\xe8\x92\x62\xf0\x75\xe3\x35\x82\x79\x43\x82\x33\x4d\x7e\xab\x70\xa8\xc0\x84\x7b\x65\xe6\xf8\x82\x66\x90\x64\x9d\x74\x65\x03\xda\xef\xd2\xc0\xd9\xfc\xbd\xdd\x5a\x90\x53\xce\x4e\x27\x3f\xdb\x93\x6b\x36\xad\x5d\xb9\x57\x52\xf0\xf2\x50\x18\x1a\x51\x5d\xc3\xe1\xe5\xd5\xec\x7f\x2b\x55\x5d\xc5\x33\xa3\xea\xef\x81\xfa\x30\xec\xac\xd1\x72\xba\x87\x56\xbb\x68\xdc\x5f\x11\x53\xeb\x44\x5f\xef\x71\x15\xf1\xf4\x3c\xa3\x90\x52\x97\xf9\x33\xea\xf4\x8b\x7e\xed\x3c\x2d\x38\x51\x92\x0e\x17\x2f\x81\x57\x7c\xa3\x94\x16\x70\x9b\x99\x53\xe0\xe7\xf7\xcc\xd2\x3e\x8b\x7e\x50\xde\xa4\xa3\x94\xa6\xf4\x7d\xc1\x9c\xe8\x95\x0b\x40\xb3\xfc\xf6\x5f\xba\x95\xb0\xed\xf7\x3f\xb3\x3c\x29\x29\xc6\x17\x2f\xfe\x45\xec\x9f\x25\x28\x99\xc8\x5b\x75\xd1\xd9\xcf\xfe\x29\x52\xde\xa2\x83\x60\x8f\xea\x43\x00\xc1\x5f\x1f\x03\xc8\xb0\x4d\xdf\x03\xc7\xe5\xe3\xd4\x74\xab\x05\x8a\x2b\x29\xb2\xf1\xec\xf4\xd2\x33\x8d\x2d\xf7\x3f\x50\xb8\xf1\xf8\xf9\x5a\x47\xb3\x83\xd1\xf5\x8e\x7c\x4a\x1c\xf6\x46\xc3\x0b\x87\x36\xfc\x2f\xba\x39\x6e\xfe\x04\x00\x00\xff\xff\x9d\x31\x55\x1a\x95\x11\x00\x00")

func MappingsJsonBytes() ([]byte, error) {
	return bindataRead(
		_MappingsJson,
		"../mappings.json",
	)
}

func MappingsJson() (*asset, error) {
	bytes, err := MappingsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../mappings.json", size: 4501, mode: os.FileMode(420), modTime: time.Unix(1560970236, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../mappings.json": MappingsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"mappings.json": &bintree{MappingsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

