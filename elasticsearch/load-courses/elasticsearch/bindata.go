// Code generated by go-bindata.
// sources:
// ../mappings.json
// DO NOT EDIT!

package elasticsearch

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _MappingsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x4d\x6f\xdb\x30\x0c\x3d\xdb\xbf\x22\xd0\x75\xbd\x14\xc3\x2e\xfd\x2b\xeb\x20\x30\x12\x9d\x10\x91\x29\x4d\x92\xe7\x66\x45\xfe\xfb\xe0\xcf\x28\x76\x12\x78\x5d\xda\x65\x58\x0f\x05\x4c\x32\xe4\x7b\x4f\x8f\x8a\xf3\x9a\x67\x22\x60\x8c\xc4\x9b\x20\x9e\x56\xaf\x79\x96\x09\x62\x8d\x2f\xfd\x43\x26\xb8\x2a\xd7\xe8\xa5\x2d\xa4\x47\x67\x48\x41\x53\xf7\xf8\x30\xc9\x85\x2d\x78\xdd\x64\xbe\x74\x19\x60\x30\xfb\x40\x43\xcf\x2c\x13\x05\x99\x88\x7e\x7c\xce\x04\x54\xd1\x2a\x5b\x3a\x83\x11\xe5\x34\x9b\x89\x12\x5e\xe4\xc6\x43\x29\x9e\x56\x9f\xbb\xa6\x6d\x94\x78\x88\x3e\x8e\xc1\xb8\x77\x28\x9e\x56\x02\xf5\x06\x25\xb7\xe9\x2e\x75\xe8\x4b\x84\xb2\xc6\x80\x0b\x28\xeb\x2d\x45\x0c\x0e\xd4\xb9\x91\x0e\x62\x44\xcf\x4d\xab\xe7\xe7\xf0\x49\x8c\x03\x1a\xe6\xa0\xb0\x44\x8e\x4d\x72\x25\x66\xa3\xfb\x8f\xca\xbe\x72\x98\x9f\x27\x28\x3a\x4d\x7e\x9e\x68\xe0\xa1\x96\xf3\x70\x22\xd6\xd7\x3e\x92\x09\x63\x6b\xf4\x0a\x02\x8e\xc3\xaf\xd2\x3a\x16\x45\x4f\x83\x1e\xd9\xb7\x23\x70\xbb\x43\xa6\x6e\xac\xd8\xe1\xbe\xb6\x5e\xcf\x69\xa9\x2a\x44\x5b\x9e\xb2\xc9\xfb\x7f\x87\xbc\x65\x26\x4a\x70\x2e\xb5\x8f\xb2\x95\x0f\x38\xfa\xc7\x79\xeb\xd0\x47\xc2\xc4\x0b\x3b\x0a\xb2\x2b\x93\xa4\x13\x39\x0a\x42\xa3\x43\x2a\x84\x87\x3a\x79\x3c\xd1\xf0\x54\xbc\x84\x6f\x8f\x3d\xe2\x4b\x4c\xc2\xad\xab\xa5\x75\x91\x2c\x37\x23\x84\xb6\x2a\x24\x79\xb6\xbe\x6c\xe2\x05\x98\x80\x7d\xf4\x30\xb1\xd1\xd0\x7a\xd0\xeb\xe4\x78\x91\x37\x86\xc2\x56\x46\x8a\x06\xff\x41\x52\x6d\xeb\x7c\x35\xf9\x3b\x3c\xcc\x42\xa2\x46\xf3\x5f\xf0\xd4\x14\x22\xb0\x42\x69\x10\x3c\x13\x6f\x5a\x36\xd3\xb2\xb6\x74\xb8\x33\x5b\x00\xf3\x56\x6d\xcd\xcc\x3d\x4b\x30\x14\xb6\x62\x0d\x0d\x6f\xb9\x47\xf0\xef\x8f\xa0\xd7\x3b\x44\x8a\x55\x33\xf6\xf2\xc4\xc9\x66\x9f\xab\xe9\xea\xaa\xb5\x21\x25\xab\x9d\xf3\x7c\xf4\xc3\xef\x00\x5f\x4e\x20\x21\xb2\x08\x8f\x64\x28\xf1\x1e\x40\xdd\x8d\x3a\x7f\x41\x96\xb3\x99\x79\xf4\xdc\x7a\x18\xe2\xdd\xe2\x9d\xb8\x70\x89\x2f\x9a\x63\x15\xdc\x66\x1b\x0c\x34\x9b\xa5\xf1\x6a\xd5\x45\xf4\x63\xf2\x26\x67\x6d\x2c\x6f\x3e\x16\xcc\x1f\x1c\x75\x69\xaf\xe0\xbc\xed\xf5\xc7\xdb\x20\x8b\x8a\x35\xa6\x2f\x27\xcb\xcc\xd4\x7f\xe5\xcc\x66\x7f\xaf\xc0\x50\x41\xb7\x72\x91\xba\x26\xc6\x25\x51\xde\xc3\x41\xb0\x46\x73\x17\x40\xf0\xc7\x7d\x00\x19\x6f\xce\x8f\xc0\xb1\x7c\x9d\x5a\xb7\x06\x60\x5d\x93\xda\x1e\x5f\x25\xde\x60\xed\x36\xd9\x34\x90\xb0\xf6\x16\xde\xb8\x22\xe9\xaf\x88\xfc\x90\xff\x0a\x00\x00\xff\xff\xdd\x23\x72\x0c\x88\x0e\x00\x00")

func MappingsJsonBytes() ([]byte, error) {
	return bindataRead(
		_MappingsJson,
		"../mappings.json",
	)
}

func MappingsJson() (*asset, error) {
	bytes, err := MappingsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../mappings.json", size: 3720, mode: os.FileMode(420), modTime: time.Unix(1547555777, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../mappings.json": MappingsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"mappings.json": &bintree{MappingsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

