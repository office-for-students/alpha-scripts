// Code generated by go-bindata.
// sources:
// ../mappings.json
// DO NOT EDIT!

package elasticsearch

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _MappingsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xcd\x6e\xdb\x30\x0c\x3e\x3b\x4f\x11\xe8\x3a\x5f\x8a\x61\x97\x3e\x43\xf7\x04\xeb\x20\x30\x32\x6d\x0b\x91\x29\x4f\x92\xe7\x7a\x45\xde\x7d\x90\x7f\xe5\x9f\x04\x69\x97\x76\xdd\x72\x30\x6c\x92\x26\x3f\x7e\xfc\x91\xf3\xbc\x8b\x98\x45\xe7\x24\x65\x96\xdd\xef\x9f\x77\x51\xc4\x24\x25\xf8\xd4\x3f\x44\x8c\xaa\xe2\x80\x86\xeb\x94\x1b\x2c\x95\x14\xe0\xed\xee\xe2\x85\xce\xe6\x60\x12\xaf\xf9\xd2\x69\x80\x40\x35\x56\x0e\x3e\xa3\x88\xa5\x52\x39\x34\xe3\x73\xc4\xa0\x72\x5a\xe8\xa2\x54\xe8\x90\x2f\xb5\x11\x2b\xe0\x89\x67\x06\x0a\x76\xbf\xff\xdc\x39\x6d\xa5\x92\x06\xe9\xdd\x28\x74\x4d\x89\xec\x7e\xcf\x30\xc9\x90\x53\xab\xee\x54\xa7\xde\x84\x09\xad\x14\x94\x16\x79\x9d\x4b\x87\xb6\x04\xb1\x15\xb2\x04\xe7\xd0\x90\x77\xf5\xf8\x68\x3f\xb1\x31\x80\xcf\x1c\x04\x16\x48\xce\x2b\xf7\x6c\x15\xba\x7f\x95\xf7\x96\xeb\xf8\x95\xb1\xc8\x09\x0a\xe4\xb6\x21\x4d\x4d\x11\x06\x1e\xbc\x0c\xaa\xd1\x7d\x2f\xf0\x34\x7e\xeb\x65\x11\xfb\x0a\x2e\xb7\x71\xd1\x5e\xfd\x3d\x16\xe0\xa4\xe8\x24\xfd\xfd\xe8\x21\x62\x0f\x50\xc7\x0f\x98\x81\x8a\x15\xd4\xb1\xf2\x77\x3d\xba\xe8\x7b\x8f\x72\x17\x60\xed\x2a\xf7\x6b\x56\x29\x03\x35\x5f\x8b\x83\x92\x4e\xd8\x94\xae\xd1\x08\xb0\x18\x20\xb8\x40\xfe\x64\xe4\x8c\x2c\x66\xef\xac\x09\x1b\x50\x4f\xe4\xeb\x23\x92\xec\x40\xb1\xc9\xf9\xba\x3a\xa2\xb2\x4e\x8f\x4d\xb1\x1b\xaf\xfe\x72\xda\xb5\xa9\xb3\x02\xca\x32\x9c\x82\x0e\xc1\x38\x06\xa5\xd1\x25\x1a\x27\x31\x68\xe9\xa3\xb4\xbc\x07\x2a\x93\x80\xaf\x54\xa2\x4a\x6c\xc8\x94\x81\x3a\x78\x9c\x91\x3c\x67\x37\x20\xa4\xc7\xee\xf0\xc9\x05\xe2\x76\x38\xb9\x2e\x9d\xd4\xe4\x43\xb0\x44\xcf\xca\x4d\xda\xb4\xed\x92\x82\xb2\xd8\x4b\x4f\x8b\x6e\x1c\x5c\x1f\xb1\xa9\xb5\x49\xd8\xac\xfe\x48\x99\x92\x36\xe7\x4e\x3a\x85\xff\x72\x52\xfb\xc5\xef\x14\xaf\x44\xac\x46\xf5\x3f\xa4\x1a\xd6\x4f\xe8\x8a\x9c\x69\x5a\xb8\xcb\x7c\xdb\x9c\x87\xf5\xde\x46\x58\x73\xd2\xda\x5c\x13\x81\x0b\x9d\xe0\xdb\x84\x59\x19\x26\xd2\x3a\x20\x81\x5c\x21\x18\x92\x94\xdd\x38\xee\xd2\x62\x0b\x43\xaa\x2b\x4a\xc0\xd7\x8d\x37\x08\xe6\x0d\x09\xce\x35\xf9\xad\xc2\xa1\x06\x13\xee\x95\x85\xe3\x2b\x9a\x41\x92\x75\xd2\x55\x2d\x68\xbf\x4b\x03\x67\xcb\xf7\xe2\xad\x20\xe7\x9c\x9d\x4f\x7e\xb1\x27\xb7\x6c\x3a\xbb\xea\xa0\xa4\xe0\xd5\xb1\x34\x34\xa1\x7a\x09\x87\xd7\x57\x73\xf8\x6d\x54\x75\x13\xcf\x82\xaa\xbf\x07\xea\xc3\xb0\xb3\x45\xcb\xf9\x1e\xda\xec\xa2\x69\x7f\x45\x4c\x6d\x13\xfd\x72\x8f\x9b\x88\xe7\xdf\x33\x0a\x29\x73\xb9\xff\x46\x9d\x9f\xe8\x2f\x9d\xa7\x15\x27\x4a\xd2\xf1\xea\x25\xf0\x07\x67\x94\xd2\x02\x6e\x33\x73\x0a\xfc\xfc\x5e\x58\xda\x17\xd1\x8f\xca\x9b\x74\x94\xd2\x94\xbd\x2f\x98\x33\xbd\x72\x05\x68\x56\xdc\xfe\xa4\xdb\x08\xdb\x9d\xff\xb9\xe5\x69\x45\x09\xbe\x7a\xf1\xaf\x62\xff\xa8\x40\xc9\x54\xde\xaa\x8b\x2e\x1e\xfb\xe7\x48\x79\x8b\x0e\x82\x03\xaa\x0f\x01\x04\x7f\x7e\x0c\x20\xe3\x36\x7d\x0f\x1c\xd7\x8f\x53\xdb\xad\x16\x28\xa9\xa5\xc8\xa7\x6f\xa7\xd7\x7e\xd3\x78\x07\x1c\x0e\x46\xc3\x2b\x47\x24\xfc\xe7\xb7\x3b\xed\x7e\x07\x00\x00\xff\xff\x53\xc4\x03\xad\x03\x11\x00\x00")

func MappingsJsonBytes() ([]byte, error) {
	return bindataRead(
		_MappingsJson,
		"../mappings.json",
	)
}

func MappingsJson() (*asset, error) {
	bytes, err := MappingsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../mappings.json", size: 4355, mode: os.FileMode(420), modTime: time.Unix(1555598690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../mappings.json": MappingsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"mappings.json": &bintree{MappingsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

